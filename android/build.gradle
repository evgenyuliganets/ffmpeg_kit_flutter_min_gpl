import java.security.MessageDigest
import java.security.NoSuchAlgorithmException

buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.1.0'
    }
}

rootProject.allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'

// Optional: run AAR download script before build
task setupDependencies(type: Exec) {
    workingDir '.'
    commandLine 'sh', '-c', '../scripts/setup_android.sh'
    onlyIf { !file('libs/ffmpeg-kit-min-gpl-6.0.aar').exists() }
}

preBuild.dependsOn setupDependencies

android {
    if (project.android.hasProperty("namespace")) {
        namespace 'com.arthenica.ffmpegkit.flutter'
    }

    compileSdkVersion 33

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 33
        versionCode 603
        versionName "6.0.3"
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    lintOptions {
        disable 'GradleCompatible'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'androidx.annotation:annotation:1.5.0'
    implementation fileTree(dir: 'libs', include: ['*.aar'])
}

String localMavenPath = project.mkdir("build").absolutePath

// Task to use AAR files and compute SHA1/MD5 for them
task useAar {
    File file = project.file("libs")
    if (file.exists() && file.isDirectory()) {
        file.listFiles(new FileFilter() {
            @Override
            boolean accept(File pathname) {
                return pathname.name.endsWith(".aar")
            }
        }).each { item ->
            // Get SHA1 and MD5 for the AAR
            String sha1 = getFileSha1(item)
            String md5 = getFileMD5(item)

            // Output the computed checksums
            println("aar: " + item.name + " file sha1: " + sha1 + " md5: " + md5)

            // Process and copy the AAR to the local Maven path
            String aarName = item.name.substring(0, item.name.length() - 4)
            String[] aarInfo = aarName.split("-")
            String fromStr = item.path
            String intoStr = localMavenPath + "/" + aarInfo[0].replace(".", "/") + "/" + aarInfo[1] + "/" + aarInfo[2]
            String newName = aarInfo[1] + "-" + aarInfo[2] + ".aar"

            project.copy {
                from fromStr
                into intoStr
                rename(item.name, newName)
            }

            // Save the checksum files (.md5 and .sha1)
            project.file(intoStr + "/" + newName + ".md5").write(md5)
            project.file(intoStr + "/" + newName + ".sha1").write(sha1)
        }
    }
}

// Function to compute the SHA1 hash of a file
String getFileSha1(File file) {
    FileInputStream input = null
    try {
        input = new FileInputStream(file)
        MessageDigest digest = MessageDigest.getInstance("SHA-1")
        byte[] buffer = new byte[1024 * 1024 * 10]

        int len = 0
        while ((len = input.read(buffer)) > 0) {
            digest.update(buffer, 0, len)
        }
        String sha1 = new BigInteger(1, digest.digest()).toString(16)
        int length = 40 - sha1.length()
        if (length > 0) {
            for (int i = 0; i < length; i++) {
                sha1 = "0" + sha1
            }
        }
        return sha1
    }
    catch (IOException e) {
        println(e)
    }
    catch (NoSuchAlgorithmException e) {
        println(e)
    }
    finally {
        try {
            if (input != null) {
                input.close()
            }
        }
        catch (IOException e) {
            println(e)
        }
    }
}

// Function to compute the MD5 hash of a file
String getFileMD5(File file) {
    FileInputStream input = null
    try {
        input = new FileInputStream(file)
        MessageDigest digest = MessageDigest.getInstance("MD5")
        byte[] buffer = new byte[1024 * 1024 * 10]

        int len = 0
        while ((len = input.read(buffer)) > 0) {
            digest.update(buffer, 0, len)
        }
        String md5 = new BigInteger(1, digest.digest()).toString(16)
        int length = 32 - md5.length()
        if (length > 0) {
            for (int i = 0; i < length; i++) {
                md5 = "0" + md5
            }
        }
        return md5
    }
    catch (IOException e) {
        println(e)
    }
    catch (NoSuchAlgorithmException e) {
        println(e)
    }
    finally {
        try {
            if (input != null) {
                input.close()
            }
        }
        catch (IOException e) {
            println(e)
        }
    }
}

preBuild.dependsOn setupDependencies
useAar.dependsOn setupDependencies
preBuild.dependsOn useAar